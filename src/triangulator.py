
from classes.triangle import Triangle
import random
import functions.pygameTestRenderer as pygameTestRenderer


def badTrianglesList(triangleList, point):
    """selects and returns the bad triangles from the triangulation.

    Args:
        triangleList (list): the triangulation
        point (tuple): the new point that will be added next

    Returns:
        list: the list of bad triangles, the triangles where the new point is within their circumcircles.
    """
    badTriangles = []

    for triangle in triangleList:
        if triangle.checkIfPointIsWithinCirle(point):
            badTriangles.append(triangle)

    return badTriangles


def polygonEdges(badTriangleList):
    """generates the polygon from the bad triangles list. The polygon is generated by taking all the edges that are not shared by two bad triangles.

    Args:
        badTriangleList (list): list of the previously calculated bad triangles

    Returns:
        list: list of edges which are in the polygon
    """
    allSides = []
    for triangle in badTriangleList:
        for side in triangle.sides:
            allSides.append(side)

    polygon = set()
    for side in allSides:
        if allSides.count(side) == 1:
            polygon.add(side)

    return polygon


def removeBadTriangles(badTriangles, triangulation):
    """removes the bad triangles from the triangulation

    Args:
        badTriangles (list): list of the triangles which are bad
        triangulation (list): list which is the whole triangulation

    Returns:
        list: the triangulation which was the input without the bad triangles
    """
    for triangle in badTriangles:
        i = 0
        while i < len(triangulation):  # voidaan mennÃ¤ lopusta alkuun!!!
            if triangle == triangulation[i]:
                triangulation.pop(i)
            else:
                i += 1

    return triangulation


def addNewTriangles(polygon, point, triangulation):
    """adds the new triangles to the triangulation by creating a triangle from every edge of the polygon with the new point

    Args:
        polygon (list): list of edges which form the polygon
        point (tuple): the point that is being currently added
        triangulation (list): list of triangle objects which is the triangulation
    """
    for edge in polygon:
        newTriangle = Triangle(edge.point1, edge.point2, point)
        triangulation.append(newTriangle)


def BowyerWatson(roomCenterPoints, sizeX, sizeY):
    """this function is the whole implementation of the Bowyer-Watson algorithm. The algorithm is split into separate pieces such that the each part can be tested separately.

    Args:
        roomCenterPoints (list): list of points which need to be triangulated
        sizeX (int): maximum value of x
        sizeY (int): maximum value of y

    Returns:
        list: list of triangles which is the triangulation
    """
    superTriangle = Triangle((0, 0), (sizeX*2, 0), (0, sizeY*2))

    triangulation = [superTriangle]

    for point in roomCenterPoints:
        badTriangles = badTrianglesList(triangulation, point)
        polygon = polygonEdges(badTriangles)
        removeBadTriangles(badTriangles, triangulation)
        addNewTriangles(polygon, point, triangulation)

    finalTriangulation = []

    for triangle in triangulation:
        if ((0, 0) in triangle.points) or ((sizeX*2, 0) in triangle.points) or ((0, sizeY*2) in triangle.points):
            continue
        else:
            finalTriangulation.append(triangle)

    return finalTriangulation


if __name__ == "__main__":
    triangleboi = Triangle((0, 0), (0, 4), (4, 0))

    testingArray = [(812, 422), (686, 311), (782, 512), (288, 67), (793, 234),
                    (756, 354), (65, 406), (853, 493), (395, 442), (630, 478)]
    mixedTestintArray = testingArray.copy()
    random.shuffle(mixedTestintArray)

    print(testingArray)
    print(mixedTestintArray)

    a = BowyerWatson(testingArray, 1000, 500)
    b = BowyerWatson(mixedTestintArray, 1000, 500)

    pygameTestRenderer.drawTriangles(a)
    pygameTestRenderer.drawTriangles(b)
